plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    // ****SafeArgs s2: Apply the plugin in the app-level gradle. AND SYNC+REBUILD THE PROJECT! After rebuilding, the project will include a generated
    // NavDirection class for each Fragment. These classes represent navigation from all the app's actions.
    // For example, HomeFragment now has a generated HomeFragmentDirections class.
    id 'androidx.navigation.safeargs'
}

android {
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.juanpoveda.recipes"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", 'WS_APP_KEY', '"da0dfbad934728064d1736e23656cc2e"'
        buildConfigField "String", 'WS_APP_ID', '"83d5fa44"'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    // ****ViewBindingFragment s1: Add viewBinding = true
    // ****ViewBindingRecyclerView s1: Add viewBinding = true
    // ****ViewBindingActivity s1: Add viewBinding = true
    buildFeatures {
        viewBinding = true
    }
    // ****ViewModelTest s8: Add this line to avoid the warnings from Robolectric when running tests.
    testOptions.unitTests {
        includeAndroidResources = true
    }
}

dependencies {
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'  // ****Retrofit s1: Add the dependency
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'    // ****Retrofit s2: Add the converter dependency

    //Navigation
    // ****Navigation s1: Add the following dependencies (ktx for kotlin)
    def nav_version = "2.3.2"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version" //For kotlin
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version" //For kotlin
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version" // Feature module Support
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version" // Testing Navigation

    // ****Room s1: Add dependencies
    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version" // optional - Kotlin Extensions and Coroutines support for Room

    //To read the state of the Fragment from ViewModel
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0-rc01'

    //RecyclerView
    implementation "androidx.recyclerview:recyclerview:1.1.0"

    //Glide
    // ****Glide s1: Add dependencies
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    // ****NavigationDrawer s1: Add dependency
    implementation "com.google.android.material:material:1.2.1"

    // ****Timber s1: Add dependency
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // ****WorkManager s1: Add dependency
    implementation "android.arch.work:work-runtime-ktx:1.0.1"

    // ****UnitTest s7 (Optional): Add hamcrest dependency to improve the quality of assertions.
    testImplementation "org.hamcrest:hamcrest-all:1.3"

    // ****ViewModelTest s4: Add the following dependencies. AndroidX Test is a collection of libraries for testing. It includes classes and methods that
    // give you versions of components like Applications and Activities, that are meant for tests. One of the benefits of the AndroidX Test APIs is that they
    // are built to work both for local tests and instrumented tests. This is nice because:
    // - You can run the same test as a local test or an instrumented test.
    // - You don't need to learn different testing APIs for local vs. instrumented tests.
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    // Robolectric is a library that creates a simulated Android environment for tests and runs faster than booting up an emulator or running on a device
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    // ****ViewModelTest s9: Add this dependency to architecture components test lib. We'll need some rules from this lib to test LiveData.
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"

    // ****TestRepositoryWithDoublesAndDependencyInjection s6: Add the dependency to be able to use coroutines in the tests
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // ****IntegrationTestEspresso s1: Add the following dependencies
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    debugImplementation "androidx.fragment:fragment-testing:$fragmentVersion"
    implementation "androidx.test:core:$androidXTestCoreVersion"

}